Day 1 --------------------------------------------------------------------------------------------->

1> Nodejs is a javascript runtime built on google's open source V8 javascript engine.
2> Earlier we had already javascript in the browser. But if we bring javascript out of browser
   container to execute, then we must need any runtime env. So nodejs is that runtime environment 
   for javascript.
3> Earlier something like accesing file system or network capabilities were not possible using javascript,
   but now since we run javascript outside browser and inside nodejs env it is very much possible.
4> Single threaded, event driven and non-blocking I/O model.
5> We can create server side web application.
6> we shouldn't use node for CPU intensive work like image processing or video conversion or file compression.

<--------------------------------------------------------------------------------------------------

Day 2 -------------------------------------------------------------------------------------------------->

1> In cmd , type node -> enter -> tab(may be 1 or two times) we will see global variables in node.
   We can select any global variables/modules say fs.
   type fs and enter then we can see all methods and variable of this fs module.

2> Difference between require and import
   CommonJS - require, module.exports
   ES6 - impor/ export
   You can't selectively load only the pieces you need with require but with import, 
   you can selectively load only the pieces you need, which can save memory.
   Loading is synchronous(step by step) for require on the other hand 
   import can be asynchronous(without waiting for previous import) so it can perform a little better than require.

3> synchronous/blocking - Executes line by line. Current line blocks the execution of next line and it becomes worst if the 
                          next line is no way dependent on previous line.

   asynchronous/non-blocking - Current line doesn't block the next line execution.

4> As we know nodejs is single threaded and we register the callback of heavy task in node-api.Once its done, the
  callback moves to callback queue and event loop moves it to call stack after monitoring.
  Single threaded means simply one call stack to execute the lines of codes.

5> Writing callbacks doesn't make our code asynchronous automatically. We have predefined asynchronous methods already in
   node-api (in node) or web-api (in browser) like setTimeout(present in both nodeapi and webapi) or accessing files in node

6> If we make nested callbacks then it will become callback hell. we then use promise(es6) or async/await(es8) to get rid of this.

7> API is nothing but a request to get the resource/data.

8> lets "nodemon":"^1.18.11"
   it has three parts , 1 -> major version (any breaking changes)
                        18 -> minor version (any new implemention with backward compatible)
                        11 -> patch version (intended to fix bug)
                        ^ -> accepts minor and patch releases
                        ~ -> accepts only patch versions

   npm outdated -> it will give all outdated packages from our packages.json file
   npm updated slugify -> to update package
   *1.18.11 -> it will update major changes also
   npm uninstall slugify -> to remove

9> Server side rendering -> We build the app (html, css, js) on the server side and send the whole app 
                            to client(browser) to display

   Client side rendering -> We send the data in json format from server to client through api and client
                            consume those api with html cs and js to come up on the UI.

10> Most of the nodejs core modules like http or filesystem are built on event driven architecture.
   event emitter (emits event) -> event listenener (calls) -> attached callback functions  
   For details, see example

11> Streams
    used to process data piece by piece (chunks) without completing the whole data and without keeping 
    all the data in memory.It is perfect for handling large volume of data like videos.And also we don't 
    have to wait until all the data is available.Ex. youtube, netflix etc. There are four types of streams 
    in nodejs. Streams are the instances of EventEmitter.

    -> Readable streams (important)
         Streams from which we can read data.
         ex- http request, fs read streams
         important events - data, end
         important functions - pipe(), read()

    -> Writable streams (important)
         Streams to which we can write data.
         ex- http responses, fs write streams
         important events - drain, finish
         important functions - write(), end()

    -> Duplex streams
       Streams that are both readable and writable
       ex- net web socket

    -> Transform streams
       Duplex stream that Transform the data.
       ex- zlib Gzip creation

12> Each javascript file is treated as a seperate module. Nodejs uses the CommonJS module system: require, exports or module.exports
    ES module system is used in browsers , import /export 
    If in package.json file, we have "type": "commonjs", then we have to use require to load the modules.
    E.g const http = require('http);
    If we have "type": "module", then we have to use import to load the module
    E.g import * as fs from 'http';


13> How require or import work?
    The steps are -: 
   -> Resolving and loading -> wrapping ->  execution -> returning exports -> caching

   i> Resolving and loading process - we have three types of modules, core modules, developer modules and third party modules.

                                      core modules - require('http');
                                      developer modules - require('./lib/controller');
                                      third party modules - require('express')

                                      1. Start with core modules
                                      2> If begins with ./ or ../ , try to load developer modules
                                      3> If no module found , try to load file index.js inside that folder.
                                         suppose not able to find file controller.js inside lib folder then it looks for
                                         index.js file inside controller folder
                                      4> else go to node_modules/ and try to module there.
   
   ii> Wrapping - It wraps the entire js file(module) inside IIFE
                  (function(exports, require, module, __dirname, __filename){

                  })();

   iii> Execution

   iv> Returning exports - require function returns exports of the required module. module.exports is the returned object.
            
   v> Caching - after loading, modules are getting cached, if we load the same modules again , it will load from the cache.

14> Callbacks - If we more nesting of callbacks, it will become callback hell .see example

15> Consuming promises using then catch. see example.

16> Building promises , see example.

17> Async await is a new features came in ES8.

18> whatever we get in the then in the promise, the same we will get in await.
   If we write 
   await getFileLocation()
   It means , getFileLocation method must return a promise and here we get the result of resolve.
   we can write code in try catch block for await. We can write await inside async method only.
   see example.

19> Async function returns promise too , and always returns resolved promise.
   To get the error from async function we need to write throw(err).
   See example

20> If we have to call a methods thats returns a promise and those promise are no way related to each other.
    Then we can make all call together at a time using Promise.all.
    See example

<-------------------------------------------------------------------------------------------------------